import numpy as np
import matplotlib.pyplot as plt

#Program reads data files generated by main.cpp
#and plots integral, error and variance dependencies of steps
#as well as the time efficiency of each method

def read(filname, var = False):
	data = open(filname).readlines()[1:]
	N = len(data)
	
	steps = np.zeros(N)
	integral = np.zeros(N)
	error = np.zeros(N)
	variance = np.zeros(N)
	i=0
	
	for line in data:
		steps[i] = float(line.split()[0])
		integral[i] = float(line.split()[1])
		error[i] = float(line.split()[2])
		if var:
			variance[i] = float(line.split()[3])
			
		i += 1
	
	return steps, integral, error, variance

NGaussLeg, integralGaussLeg, errorGaussLeg = read('gaussLeg.dat')[:-1]
timeGaussLeg = np.array([6.53, 274.672, 3097.51, 19028.2, 72398.8, 223682, 560574., 1258820.]) 

NGaussLag, integralGaussLag, errorGaussLag = read('gaussLag.dat')[:-1]
timeGaussLag = np.array([8.9998, 284.893, 3250.31, 18354.6, 76742.5, 231854.0, 583462.0, 1316460.]) 

NBruteMC, integralBruteMC, errorBruteMC, varianceBruteMC = read('bruteMC.dat', var=True)
timeBruteMC = np.array([0.0185, 0.0556, 0.5383, 5.4254, 54.0088, 554.431, 5664.73, 57798.3]) 

NImpsampMC, integralImpsampMC, errorImpsampMC, varianceImpsampMC = read('impsampMC.dat', var=True)
timeImpsampMC = np.array([0.0322, 0.0828, 0.8779, 8.5047, 82.0188, 826.753, 7945.73, 78832.2])

analyticVal = 5*np.pi**2/16**2

fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)
ax.plot(NGaussLeg, analyticVal*np.ones_like(NGaussLeg),'g', linewidth = 3, label = 'Analytic')
ax.plot(NGaussLeg, integralGaussLeg, '--', linewidth = 3, label = 'Gauss-Legendre')
ax.plot(NGaussLag, integralGaussLag, '--', linewidth = 3, label = 'Gauss-Laguerre')
ax.plot(NGaussLeg, integralGaussLeg, 'bo', linewidth = 3)
ax.plot(NGaussLag, integralGaussLag, 'o', color="orange", linewidth = 3)
ax.set_xlabel('Number of meshpoints, N')
ax.set_ylabel('Integral')
ax.grid(True)
ax.legend(loc=1, prop={'size': 7})
fig.savefig('quadratureInt.png', bbox_inches="tight")


fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)
ax.plot(NGaussLeg, errorGaussLeg, linewidth = 3, label = 'Gauss-Legendre')
ax.plot(NGaussLag, errorGaussLag, linewidth = 3, label = 'Gauss-Laguerre')
ax.plot(NGaussLeg, errorGaussLeg, 'bo', linewidth = 3)
ax.plot(NGaussLag, errorGaussLag, 'o', color ='orange', linewidth = 3)
ax.set_xlabel('Number of Meshpoints, N')
ax.set_ylabel('Relative Error')
ax.grid(True)
ax.legend(loc=1, prop={'size': 7})
fig.savefig('quadratureError.png', bbox_inches="tight")

fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)

ax.plot(NBruteMC, analyticVal*np.ones_like(NBruteMC), 'g', linewidth = 3, label = 'Analytic')
ax.plot(NBruteMC, integralBruteMC, '--', linewidth = 3, label = 'Monte Carlo, uniform')
ax.plot(NImpsampMC, integralImpsampMC, '--', linewidth = 3, label = 'Monte Carlo, exponential')
ax.plot(NBruteMC, integralBruteMC, 'bo', linewidth = 3)
ax.plot(NImpsampMC, integralImpsampMC, 'o', color='orange', linewidth = 3)

ax.set_xlabel('Number of meshpoints, N')
plt.xscale('log')
ax.set_ylabel('Integral')
ax.grid(True)
ax.legend(loc=4, prop={'size': 7})
fig.savefig('MCInt.png', bbox_inches="tight")

fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)
ax.plot(NBruteMC, linewidth = 3, label = 'Gauss-Legendre')
ax.plot(NGaussLag, errorGaussLag, linewidth = 3, label = 'Gauss-Laguerre')
ax.plot(NGaussLeg, errorGaussLeg, 'bo', linewidth = 3)
ax.plot(NGaussLag, errorGaussLag, 'o', color ='orange', linewidth = 3)
ax.set_xlabel('Number of Meshpoints, N')
ax.set_ylabel('Relative Error')
ax.grid(True)
ax.legend(loc=1, prop={'size': 7})
fig.savefig('quadratureError.png', bbox_inches="tight")

fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)
plt.xscale('log')
ax.plot(NBruteMC, errorBruteMC, linewidth = 3,label = 'Monte Carlo, uniform')
ax.plot(NImpsampMC, errorImpsampMC, linewidth = 3,label = 'Monte Carlo, exponential')
ax.plot(NBruteMC, errorBruteMC, 'bo',linewidth = 3)
ax.plot(NImpsampMC, errorImpsampMC,'o', color='orange', linewidth = 3)
ax.set_xlabel('Number of meshpoints, N')
ax.set_ylabel('Variance')
ax.grid(True)
ax.legend( prop={'size': 7})
fig.savefig('MCError.png', bbox_inches="tight")

fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)
plt.xscale('log')
plt.yscale('log')
ax.plot(NBruteMC, varianceBruteMC, linewidth = 3,label = 'Monte Carlo, uniform')
ax.plot(NImpsampMC, varianceImpsampMC, linewidth = 3,label = 'Monte Carlo, exponential')
ax.plot(NBruteMC, varianceBruteMC, 'bo',linewidth = 3)
ax.plot(NImpsampMC, varianceImpsampMC,'o', color='orange', linewidth = 3)
ax.set_xlabel('Number of meshpoints, N')
ax.set_ylabel('Variance')
ax.grid(True)
ax.legend( prop={'size': 7})
fig.savefig('MCVariance.png', bbox_inches="tight")
